Case Study: https://8weeksqlchallenge.com/case-study-2/

/* --------------------
   Case Study Questions
   --------------------*/

-- A. Pizza Metrics
-- 1. How many pizzas were ordered?
select count(*) from customer_orders;


-- 2. How many unique customer orders were made?
select count(distinct order_id) from customer_orders;


-- 3. How many successful orders were delivered by each runner?
select runner_id, count(order_id)
from runner_orders
where duration <> 'null'
group by runner_id;


-- 4. How many of each type of pizza was delivered?
select pizza_name, count(c.pizza_id) as count
from pizza_names p
join customer_orders c on p.pizza_id = c.pizza_id
join runner_orders r on c.order_id = r.order_id
where r.duration != 'null'
group by p.pizza_name;


-- 5. How many Vegetarian and Meatlovers were ordered by each customer?
select co.customer_id,sum(
  case when co.pizza_id=1 then 1
  else 0 end) as meatlovers,
sum(
  case when co.pizza_id=2 then 1
  else 0 end) as vegetarian
from customer_orders as co
left join pizza_names as pn
on co.pizza_id=pn.pizza_id
group by 1;


-- 6. What was the maximum number of pizzas delivered in a single order?
select max(no_of_pizza) as max_pizzas
from (select co.order_id, count(co.pizza_id) as no_of_pizza
from customer_orders as co
join runner_orders as ro
on co.order_id=ro.order_id
where distance <> 'null'
group by 1
) as a

-- 7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
with orders as 
(
  select co.order_id,
  co.pizza_id,
  co.customer_id,
  coalesce(case when(exclusions is NULL or exclusions = '') or (extras is NULL or exclusions='') then 1 end, 0) as one_change,
  coalesce(case when(exclusions is not null or exclusions <> '') or (extras is not null or extras <> '') then 1 end, 0) as no_change
  from customer_orders as co
  inner join runner_orders as ro
  on co.order_id=ro.order_id
  where ro.pickup_time is not null
)
select customer_id,
sum(case when one_change>0 and no_change>0 then 1
    when one_change > 0 and no_change=0 then 1
    when one_change = 0 and no_change>0 then 0 end) as one_change,
sum(case when one_change>0 and no_change>0 then 0
    when one_change > 0 and no_change=0 then 0
    when one_change = 0 and no_change>0 then 1 end) as no_change
from orders
group by 1;
